Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    NOTEQUAL
    WHILE
    FOR
    POS
    WIDTH
    COLOR
    FONTSIZE
    WORD
    RADIUS
    WHITE
    BLACK
    RED
    BLUE
    YELLOW
    GREEN
    PINK
    PURPLE
    MAROON
    ORANGE
    LIME

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> PRINT expression
Rule 6     compare -> expression COMP expression
Rule 7     compare -> expression EQUALS expression
Rule 8     compare -> expression LESSTHAN expression
Rule 9     compare -> expression GREATTHAN expression
Rule 10    structure -> IDENTIFIER ( assignation ; compare ; assignation ) { programme }
Rule 11    structure -> IDENTIFIER ( compare ) { programme }
Rule 12    structure -> FORMS ( params )
Rule 13    param -> IDPARAMS : paramvalue
Rule 14    params -> param
Rule 15    params -> param ; params
Rule 16    paramvalue -> expression , paramvalue
Rule 17    paramvalue -> expression
Rule 18    expression -> NUMBER
Rule 19    expression -> IDENTIFIER
Rule 20    expression -> COLORPARAMS
Rule 21    expression -> STRING
Rule 22    expression -> ( expression )
Rule 23    expression -> expression ADD_OP expression
Rule 24    expression -> expression MUL_OP expression
Rule 25    expression -> ADD_OP expression
Rule 26    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 10 11 12 22
)                    : 10 11 12 22
,                    : 16
:                    : 13
;                    : 2 10 10 15
=                    : 26
ADD_OP               : 23 25
BLACK                : 
BLUE                 : 
COLOR                : 
COLORPARAMS          : 20
COMP                 : 6
EQUALS               : 7
FONTSIZE             : 
FOR                  : 
FORMS                : 12
GREATTHAN            : 9
GREEN                : 
IDENTIFIER           : 10 11 19 26
IDPARAMS             : 13
LESSTHAN             : 8
LIME                 : 
MAROON               : 
MUL_OP               : 24
NOTEQUAL             : 
NUMBER               : 18
ORANGE               : 
PINK                 : 
POS                  : 
PRINT                : 5
PURPLE               : 
RADIUS               : 
RED                  : 
STRING               : 21
WHILE                : 
WHITE                : 
WIDTH                : 
WORD                 : 
YELLOW               : 
error                : 
{                    : 10 11
}                    : 10 11

Nonterminals, with rules where they appear

assignation          : 3 10 10
compare              : 10 11
expression           : 5 6 6 7 7 8 8 9 9 16 17 22 23 23 24 24 25 26
param                : 14 15
params               : 12 15
paramvalue           : 13 16
programme            : 2 10 11 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (26) assignation -> . IDENTIFIER = expression
    (10) structure -> . IDENTIFIER ( assignation ; compare ; assignation ) { programme }
    (11) structure -> . IDENTIFIER ( compare ) { programme }
    (12) structure -> . FORMS ( params )

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FORMS           shift and go to state 7

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 8


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> PRINT . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 9

state 6

    (26) assignation -> IDENTIFIER . = expression
    (10) structure -> IDENTIFIER . ( assignation ; compare ; assignation ) { programme }
    (11) structure -> IDENTIFIER . ( compare ) { programme }

    =               shift and go to state 16
    (               shift and go to state 17


state 7

    (12) structure -> FORMS . ( params )

    (               shift and go to state 18


state 8

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (26) assignation -> . IDENTIFIER = expression
    (10) structure -> . IDENTIFIER ( assignation ; compare ; assignation ) { programme }
    (11) structure -> . IDENTIFIER ( compare ) { programme }
    (12) structure -> . FORMS ( params )

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FORMS           shift and go to state 7

    statement                      shift and go to state 2
    programme                      shift and go to state 19
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 9

    (5) statement -> PRINT expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ;               reduce using rule 5 (statement -> PRINT expression .)
    $end            reduce using rule 5 (statement -> PRINT expression .)
    }               reduce using rule 5 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 10

    (18) expression -> NUMBER .

    ADD_OP          reduce using rule 18 (expression -> NUMBER .)
    MUL_OP          reduce using rule 18 (expression -> NUMBER .)
    ;               reduce using rule 18 (expression -> NUMBER .)
    $end            reduce using rule 18 (expression -> NUMBER .)
    }               reduce using rule 18 (expression -> NUMBER .)
    )               reduce using rule 18 (expression -> NUMBER .)
    COMP            reduce using rule 18 (expression -> NUMBER .)
    EQUALS          reduce using rule 18 (expression -> NUMBER .)
    LESSTHAN        reduce using rule 18 (expression -> NUMBER .)
    GREATTHAN       reduce using rule 18 (expression -> NUMBER .)
    ,               reduce using rule 18 (expression -> NUMBER .)


state 11

    (19) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 19 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 19 (expression -> IDENTIFIER .)
    ;               reduce using rule 19 (expression -> IDENTIFIER .)
    $end            reduce using rule 19 (expression -> IDENTIFIER .)
    }               reduce using rule 19 (expression -> IDENTIFIER .)
    )               reduce using rule 19 (expression -> IDENTIFIER .)
    COMP            reduce using rule 19 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 19 (expression -> IDENTIFIER .)
    GREATTHAN       reduce using rule 19 (expression -> IDENTIFIER .)
    ,               reduce using rule 19 (expression -> IDENTIFIER .)


state 12

    (20) expression -> COLORPARAMS .

    ADD_OP          reduce using rule 20 (expression -> COLORPARAMS .)
    MUL_OP          reduce using rule 20 (expression -> COLORPARAMS .)
    ;               reduce using rule 20 (expression -> COLORPARAMS .)
    $end            reduce using rule 20 (expression -> COLORPARAMS .)
    }               reduce using rule 20 (expression -> COLORPARAMS .)
    )               reduce using rule 20 (expression -> COLORPARAMS .)
    COMP            reduce using rule 20 (expression -> COLORPARAMS .)
    EQUALS          reduce using rule 20 (expression -> COLORPARAMS .)
    LESSTHAN        reduce using rule 20 (expression -> COLORPARAMS .)
    GREATTHAN       reduce using rule 20 (expression -> COLORPARAMS .)
    ,               reduce using rule 20 (expression -> COLORPARAMS .)


state 13

    (21) expression -> STRING .

    ADD_OP          reduce using rule 21 (expression -> STRING .)
    MUL_OP          reduce using rule 21 (expression -> STRING .)
    ;               reduce using rule 21 (expression -> STRING .)
    $end            reduce using rule 21 (expression -> STRING .)
    }               reduce using rule 21 (expression -> STRING .)
    )               reduce using rule 21 (expression -> STRING .)
    COMP            reduce using rule 21 (expression -> STRING .)
    EQUALS          reduce using rule 21 (expression -> STRING .)
    LESSTHAN        reduce using rule 21 (expression -> STRING .)
    GREATTHAN       reduce using rule 21 (expression -> STRING .)
    ,               reduce using rule 21 (expression -> STRING .)


state 14

    (22) expression -> ( . expression )
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 22

state 15

    (25) expression -> ADD_OP . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 23

state 16

    (26) assignation -> IDENTIFIER = . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 24

state 17

    (10) structure -> IDENTIFIER ( . assignation ; compare ; assignation ) { programme }
    (11) structure -> IDENTIFIER ( . compare ) { programme }
    (26) assignation -> . IDENTIFIER = expression
    (6) compare -> . expression COMP expression
    (7) compare -> . expression EQUALS expression
    (8) compare -> . expression LESSTHAN expression
    (9) compare -> . expression GREATTHAN expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 25
    NUMBER          shift and go to state 10
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    assignation                    shift and go to state 26
    compare                        shift and go to state 27
    expression                     shift and go to state 28

state 18

    (12) structure -> FORMS ( . params )
    (14) params -> . param
    (15) params -> . param ; params
    (13) param -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 31

    params                         shift and go to state 29
    param                          shift and go to state 30

state 19

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 20

    (23) expression -> expression ADD_OP . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 32

state 21

    (24) expression -> expression MUL_OP . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 33

state 22

    (22) expression -> ( expression . )
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               shift and go to state 34
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 23

    (25) expression -> ADD_OP expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 25 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 25 (expression -> ADD_OP expression .)
    ;               reduce using rule 25 (expression -> ADD_OP expression .)
    $end            reduce using rule 25 (expression -> ADD_OP expression .)
    }               reduce using rule 25 (expression -> ADD_OP expression .)
    )               reduce using rule 25 (expression -> ADD_OP expression .)
    COMP            reduce using rule 25 (expression -> ADD_OP expression .)
    EQUALS          reduce using rule 25 (expression -> ADD_OP expression .)
    LESSTHAN        reduce using rule 25 (expression -> ADD_OP expression .)
    GREATTHAN       reduce using rule 25 (expression -> ADD_OP expression .)
    ,               reduce using rule 25 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 24

    (26) assignation -> IDENTIFIER = expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ;               reduce using rule 26 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 26 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 26 (assignation -> IDENTIFIER = expression .)
    )               reduce using rule 26 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 25

    (26) assignation -> IDENTIFIER . = expression
    (19) expression -> IDENTIFIER .

    =               shift and go to state 16
    COMP            reduce using rule 19 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 19 (expression -> IDENTIFIER .)
    GREATTHAN       reduce using rule 19 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 19 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 19 (expression -> IDENTIFIER .)


state 26

    (10) structure -> IDENTIFIER ( assignation . ; compare ; assignation ) { programme }

    ;               shift and go to state 35


state 27

    (11) structure -> IDENTIFIER ( compare . ) { programme }

    )               shift and go to state 36


state 28

    (6) compare -> expression . COMP expression
    (7) compare -> expression . EQUALS expression
    (8) compare -> expression . LESSTHAN expression
    (9) compare -> expression . GREATTHAN expression
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    COMP            shift and go to state 37
    EQUALS          shift and go to state 38
    LESSTHAN        shift and go to state 39
    GREATTHAN       shift and go to state 40
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 29

    (12) structure -> FORMS ( params . )

    )               shift and go to state 41


state 30

    (14) params -> param .
    (15) params -> param . ; params

    )               reduce using rule 14 (params -> param .)
    ;               shift and go to state 42


state 31

    (13) param -> IDPARAMS . : paramvalue

    :               shift and go to state 43


state 32

    (23) expression -> expression ADD_OP expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 23 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 23 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 23 (expression -> expression ADD_OP expression .)
    }               reduce using rule 23 (expression -> expression ADD_OP expression .)
    )               reduce using rule 23 (expression -> expression ADD_OP expression .)
    COMP            reduce using rule 23 (expression -> expression ADD_OP expression .)
    EQUALS          reduce using rule 23 (expression -> expression ADD_OP expression .)
    LESSTHAN        reduce using rule 23 (expression -> expression ADD_OP expression .)
    GREATTHAN       reduce using rule 23 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 23 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 21

  ! MUL_OP          [ reduce using rule 23 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 20 ]


state 33

    (24) expression -> expression MUL_OP expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 24 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 24 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 24 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 24 (expression -> expression MUL_OP expression .)
    }               reduce using rule 24 (expression -> expression MUL_OP expression .)
    )               reduce using rule 24 (expression -> expression MUL_OP expression .)
    COMP            reduce using rule 24 (expression -> expression MUL_OP expression .)
    EQUALS          reduce using rule 24 (expression -> expression MUL_OP expression .)
    LESSTHAN        reduce using rule 24 (expression -> expression MUL_OP expression .)
    GREATTHAN       reduce using rule 24 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 24 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 34

    (22) expression -> ( expression ) .

    ADD_OP          reduce using rule 22 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 22 (expression -> ( expression ) .)
    ;               reduce using rule 22 (expression -> ( expression ) .)
    $end            reduce using rule 22 (expression -> ( expression ) .)
    }               reduce using rule 22 (expression -> ( expression ) .)
    )               reduce using rule 22 (expression -> ( expression ) .)
    COMP            reduce using rule 22 (expression -> ( expression ) .)
    EQUALS          reduce using rule 22 (expression -> ( expression ) .)
    LESSTHAN        reduce using rule 22 (expression -> ( expression ) .)
    GREATTHAN       reduce using rule 22 (expression -> ( expression ) .)
    ,               reduce using rule 22 (expression -> ( expression ) .)


state 35

    (10) structure -> IDENTIFIER ( assignation ; . compare ; assignation ) { programme }
    (6) compare -> . expression COMP expression
    (7) compare -> . expression EQUALS expression
    (8) compare -> . expression LESSTHAN expression
    (9) compare -> . expression GREATTHAN expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    compare                        shift and go to state 44
    expression                     shift and go to state 28

state 36

    (11) structure -> IDENTIFIER ( compare ) . { programme }

    {               shift and go to state 45


state 37

    (6) compare -> expression COMP . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 46

state 38

    (7) compare -> expression EQUALS . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 47

state 39

    (8) compare -> expression LESSTHAN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 48

state 40

    (9) compare -> expression GREATTHAN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 49

state 41

    (12) structure -> FORMS ( params ) .

    ;               reduce using rule 12 (structure -> FORMS ( params ) .)
    $end            reduce using rule 12 (structure -> FORMS ( params ) .)
    }               reduce using rule 12 (structure -> FORMS ( params ) .)


state 42

    (15) params -> param ; . params
    (14) params -> . param
    (15) params -> . param ; params
    (13) param -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 31

    param                          shift and go to state 30
    params                         shift and go to state 50

state 43

    (13) param -> IDPARAMS : . paramvalue
    (16) paramvalue -> . expression , paramvalue
    (17) paramvalue -> . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    paramvalue                     shift and go to state 51
    expression                     shift and go to state 52

state 44

    (10) structure -> IDENTIFIER ( assignation ; compare . ; assignation ) { programme }

    ;               shift and go to state 53


state 45

    (11) structure -> IDENTIFIER ( compare ) { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (26) assignation -> . IDENTIFIER = expression
    (10) structure -> . IDENTIFIER ( assignation ; compare ; assignation ) { programme }
    (11) structure -> . IDENTIFIER ( compare ) { programme }
    (12) structure -> . FORMS ( params )

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FORMS           shift and go to state 7

    programme                      shift and go to state 54
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 46

    (6) compare -> expression COMP expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 6 (compare -> expression COMP expression .)
    ;               reduce using rule 6 (compare -> expression COMP expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 47

    (7) compare -> expression EQUALS expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 7 (compare -> expression EQUALS expression .)
    ;               reduce using rule 7 (compare -> expression EQUALS expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 48

    (8) compare -> expression LESSTHAN expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 8 (compare -> expression LESSTHAN expression .)
    ;               reduce using rule 8 (compare -> expression LESSTHAN expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 49

    (9) compare -> expression GREATTHAN expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 9 (compare -> expression GREATTHAN expression .)
    ;               reduce using rule 9 (compare -> expression GREATTHAN expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 50

    (15) params -> param ; params .

    )               reduce using rule 15 (params -> param ; params .)


state 51

    (13) param -> IDPARAMS : paramvalue .

    ;               reduce using rule 13 (param -> IDPARAMS : paramvalue .)
    )               reduce using rule 13 (param -> IDPARAMS : paramvalue .)


state 52

    (16) paramvalue -> expression . , paramvalue
    (17) paramvalue -> expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ,               shift and go to state 55
    ;               reduce using rule 17 (paramvalue -> expression .)
    )               reduce using rule 17 (paramvalue -> expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 53

    (10) structure -> IDENTIFIER ( assignation ; compare ; . assignation ) { programme }
    (26) assignation -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 56

    assignation                    shift and go to state 57

state 54

    (11) structure -> IDENTIFIER ( compare ) { programme . }

    }               shift and go to state 58


state 55

    (16) paramvalue -> expression , . paramvalue
    (16) paramvalue -> . expression , paramvalue
    (17) paramvalue -> . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11
    COLORPARAMS     shift and go to state 12
    STRING          shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 15

    expression                     shift and go to state 52
    paramvalue                     shift and go to state 59

state 56

    (26) assignation -> IDENTIFIER . = expression

    =               shift and go to state 16


state 57

    (10) structure -> IDENTIFIER ( assignation ; compare ; assignation . ) { programme }

    )               shift and go to state 60


state 58

    (11) structure -> IDENTIFIER ( compare ) { programme } .

    ;               reduce using rule 11 (structure -> IDENTIFIER ( compare ) { programme } .)
    $end            reduce using rule 11 (structure -> IDENTIFIER ( compare ) { programme } .)
    }               reduce using rule 11 (structure -> IDENTIFIER ( compare ) { programme } .)


state 59

    (16) paramvalue -> expression , paramvalue .

    ;               reduce using rule 16 (paramvalue -> expression , paramvalue .)
    )               reduce using rule 16 (paramvalue -> expression , paramvalue .)


state 60

    (10) structure -> IDENTIFIER ( assignation ; compare ; assignation ) . { programme }

    {               shift and go to state 61


state 61

    (10) structure -> IDENTIFIER ( assignation ; compare ; assignation ) { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (26) assignation -> . IDENTIFIER = expression
    (10) structure -> . IDENTIFIER ( assignation ; compare ; assignation ) { programme }
    (11) structure -> . IDENTIFIER ( compare ) { programme }
    (12) structure -> . FORMS ( params )

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FORMS           shift and go to state 7

    assignation                    shift and go to state 3
    programme                      shift and go to state 62
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 62

    (10) structure -> IDENTIFIER ( assignation ; compare ; assignation ) { programme . }

    }               shift and go to state 63


state 63

    (10) structure -> IDENTIFIER ( assignation ; compare ; assignation ) { programme } .

    ;               reduce using rule 10 (structure -> IDENTIFIER ( assignation ; compare ; assignation ) { programme } .)
    $end            reduce using rule 10 (structure -> IDENTIFIER ( assignation ; compare ; assignation ) { programme } .)
    }               reduce using rule 10 (structure -> IDENTIFIER ( assignation ; compare ; assignation ) { programme } .)

