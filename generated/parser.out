Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    PLUSEGAL
    COMPARE
    IF
    ELSE
    POS
    WIDTH
    COLOR
    FONTSIZE
    WORD
    RADIUS
    WHITE
    BLACK
    RED
    BLUE
    YELLOW
    GREEN
    PINK
    PURPLE
    MAROON
    ORANGE
    LIME

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> structure
Rule 4     statement -> assignation
Rule 5     structure -> FOR expression { programme }
Rule 6     structure -> WHILE expression { programme }
Rule 7     structure -> FORMS ( params )
Rule 8     params -> IDPARAMS : paramvalue ; params
Rule 9     params -> IDPARAMS : paramvalue
Rule 10    paramvalue -> expression , paramvalue
Rule 11    paramvalue -> expression
Rule 12    expression -> NUMBER
Rule 13    expression -> IDENTIFIER
Rule 14    expression -> COLORPARAMS
Rule 15    expression -> " STRING "
Rule 16    expression -> ( expression )
Rule 17    expression -> expression ADD_OP expression
Rule 18    expression -> expression MUL_OP expression
Rule 19    expression -> ADD_OP expression
Rule 20    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

"                    : 15 15
(                    : 7 16
)                    : 7 16
,                    : 10
:                    : 8 9
;                    : 2 8
=                    : 20
ADD_OP               : 17 19
BLACK                : 
BLUE                 : 
COLOR                : 
COLORPARAMS          : 14
COMPARE              : 
ELSE                 : 
FONTSIZE             : 
FOR                  : 5
FORMS                : 7
GREEN                : 
IDENTIFIER           : 13 20
IDPARAMS             : 8 9
IF                   : 
LIME                 : 
MAROON               : 
MUL_OP               : 18
NUMBER               : 12
ORANGE               : 
PINK                 : 
PLUSEGAL             : 
POS                  : 
PURPLE               : 
RADIUS               : 
RED                  : 
STRING               : 15
WHILE                : 6
WHITE                : 
WIDTH                : 
WORD                 : 
YELLOW               : 
error                : 
{                    : 5 6
}                    : 5 6

Nonterminals, with rules where they appear

assignation          : 4
expression           : 5 6 10 11 16 17 17 18 18 19 20
params               : 7 8
paramvalue           : 8 9 10
programme            : 2 5 6 0
statement            : 1 2
structure            : 3

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . structure
    (4) statement -> . assignation
    (5) structure -> . FOR expression { programme }
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . FORMS ( params )
    (20) assignation -> . IDENTIFIER = expression

    FOR             shift and go to state 5
    WHILE           shift and go to state 6
    FORMS           shift and go to state 7
    IDENTIFIER      shift and go to state 8

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 9


state 3

    (3) statement -> structure .

    ;               reduce using rule 3 (statement -> structure .)
    $end            reduce using rule 3 (statement -> structure .)
    }               reduce using rule 3 (statement -> structure .)


state 4

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)
    $end            reduce using rule 4 (statement -> assignation .)
    }               reduce using rule 4 (statement -> assignation .)


state 5

    (5) structure -> FOR . expression { programme }
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 10

state 6

    (6) structure -> WHILE . expression { programme }
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 17

state 7

    (7) structure -> FORMS . ( params )

    (               shift and go to state 18


state 8

    (20) assignation -> IDENTIFIER . = expression

    =               shift and go to state 19


state 9

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . structure
    (4) statement -> . assignation
    (5) structure -> . FOR expression { programme }
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . FORMS ( params )
    (20) assignation -> . IDENTIFIER = expression

    FOR             shift and go to state 5
    WHILE           shift and go to state 6
    FORMS           shift and go to state 7
    IDENTIFIER      shift and go to state 8

    statement                      shift and go to state 2
    programme                      shift and go to state 20
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 10

    (5) structure -> FOR expression . { programme }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    {               shift and go to state 21
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23


state 11

    (12) expression -> NUMBER .

    {               reduce using rule 12 (expression -> NUMBER .)
    ADD_OP          reduce using rule 12 (expression -> NUMBER .)
    MUL_OP          reduce using rule 12 (expression -> NUMBER .)
    )               reduce using rule 12 (expression -> NUMBER .)
    ;               reduce using rule 12 (expression -> NUMBER .)
    $end            reduce using rule 12 (expression -> NUMBER .)
    }               reduce using rule 12 (expression -> NUMBER .)
    ,               reduce using rule 12 (expression -> NUMBER .)


state 12

    (13) expression -> IDENTIFIER .

    {               reduce using rule 13 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 13 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 13 (expression -> IDENTIFIER .)
    )               reduce using rule 13 (expression -> IDENTIFIER .)
    ;               reduce using rule 13 (expression -> IDENTIFIER .)
    $end            reduce using rule 13 (expression -> IDENTIFIER .)
    }               reduce using rule 13 (expression -> IDENTIFIER .)
    ,               reduce using rule 13 (expression -> IDENTIFIER .)


state 13

    (14) expression -> COLORPARAMS .

    {               reduce using rule 14 (expression -> COLORPARAMS .)
    ADD_OP          reduce using rule 14 (expression -> COLORPARAMS .)
    MUL_OP          reduce using rule 14 (expression -> COLORPARAMS .)
    )               reduce using rule 14 (expression -> COLORPARAMS .)
    ;               reduce using rule 14 (expression -> COLORPARAMS .)
    $end            reduce using rule 14 (expression -> COLORPARAMS .)
    }               reduce using rule 14 (expression -> COLORPARAMS .)
    ,               reduce using rule 14 (expression -> COLORPARAMS .)


state 14

    (15) expression -> " . STRING "

    STRING          shift and go to state 24


state 15

    (16) expression -> ( . expression )
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 25

state 16

    (19) expression -> ADD_OP . expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 26

state 17

    (6) structure -> WHILE expression . { programme }
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    {               shift and go to state 27
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23


state 18

    (7) structure -> FORMS ( . params )
    (8) params -> . IDPARAMS : paramvalue ; params
    (9) params -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 29

    params                         shift and go to state 28

state 19

    (20) assignation -> IDENTIFIER = . expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 30

state 20

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 21

    (5) structure -> FOR expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . structure
    (4) statement -> . assignation
    (5) structure -> . FOR expression { programme }
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . FORMS ( params )
    (20) assignation -> . IDENTIFIER = expression

    FOR             shift and go to state 5
    WHILE           shift and go to state 6
    FORMS           shift and go to state 7
    IDENTIFIER      shift and go to state 8

    programme                      shift and go to state 31
    statement                      shift and go to state 2
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 22

    (17) expression -> expression ADD_OP . expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 32

state 23

    (18) expression -> expression MUL_OP . expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 33

state 24

    (15) expression -> " STRING . "

    "               shift and go to state 34


state 25

    (16) expression -> ( expression . )
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    )               shift and go to state 35
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23


state 26

    (19) expression -> ADD_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    {               reduce using rule 19 (expression -> ADD_OP expression .)
    ADD_OP          reduce using rule 19 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 19 (expression -> ADD_OP expression .)
    )               reduce using rule 19 (expression -> ADD_OP expression .)
    ;               reduce using rule 19 (expression -> ADD_OP expression .)
    $end            reduce using rule 19 (expression -> ADD_OP expression .)
    }               reduce using rule 19 (expression -> ADD_OP expression .)
    ,               reduce using rule 19 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 23 ]


state 27

    (6) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . structure
    (4) statement -> . assignation
    (5) structure -> . FOR expression { programme }
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . FORMS ( params )
    (20) assignation -> . IDENTIFIER = expression

    FOR             shift and go to state 5
    WHILE           shift and go to state 6
    FORMS           shift and go to state 7
    IDENTIFIER      shift and go to state 8

    programme                      shift and go to state 36
    statement                      shift and go to state 2
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 28

    (7) structure -> FORMS ( params . )

    )               shift and go to state 37


state 29

    (8) params -> IDPARAMS . : paramvalue ; params
    (9) params -> IDPARAMS . : paramvalue

    :               shift and go to state 38


state 30

    (20) assignation -> IDENTIFIER = expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    ;               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23


state 31

    (5) structure -> FOR expression { programme . }

    }               shift and go to state 39


state 32

    (17) expression -> expression ADD_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    {               reduce using rule 17 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 17 (expression -> expression ADD_OP expression .)
    )               reduce using rule 17 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 17 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 17 (expression -> expression ADD_OP expression .)
    }               reduce using rule 17 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 17 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 23

  ! MUL_OP          [ reduce using rule 17 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]


state 33

    (18) expression -> expression MUL_OP expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    {               reduce using rule 18 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 18 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 18 (expression -> expression MUL_OP expression .)
    )               reduce using rule 18 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 18 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 18 (expression -> expression MUL_OP expression .)
    }               reduce using rule 18 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 18 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 23 ]


state 34

    (15) expression -> " STRING " .

    {               reduce using rule 15 (expression -> " STRING " .)
    ADD_OP          reduce using rule 15 (expression -> " STRING " .)
    MUL_OP          reduce using rule 15 (expression -> " STRING " .)
    )               reduce using rule 15 (expression -> " STRING " .)
    ;               reduce using rule 15 (expression -> " STRING " .)
    $end            reduce using rule 15 (expression -> " STRING " .)
    }               reduce using rule 15 (expression -> " STRING " .)
    ,               reduce using rule 15 (expression -> " STRING " .)


state 35

    (16) expression -> ( expression ) .

    {               reduce using rule 16 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 16 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 16 (expression -> ( expression ) .)
    )               reduce using rule 16 (expression -> ( expression ) .)
    ;               reduce using rule 16 (expression -> ( expression ) .)
    $end            reduce using rule 16 (expression -> ( expression ) .)
    }               reduce using rule 16 (expression -> ( expression ) .)
    ,               reduce using rule 16 (expression -> ( expression ) .)


state 36

    (6) structure -> WHILE expression { programme . }

    }               shift and go to state 40


state 37

    (7) structure -> FORMS ( params ) .

    ;               reduce using rule 7 (structure -> FORMS ( params ) .)
    $end            reduce using rule 7 (structure -> FORMS ( params ) .)
    }               reduce using rule 7 (structure -> FORMS ( params ) .)


state 38

    (8) params -> IDPARAMS : . paramvalue ; params
    (9) params -> IDPARAMS : . paramvalue
    (10) paramvalue -> . expression , paramvalue
    (11) paramvalue -> . expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    paramvalue                     shift and go to state 41
    expression                     shift and go to state 42

state 39

    (5) structure -> FOR expression { programme } .

    ;               reduce using rule 5 (structure -> FOR expression { programme } .)
    $end            reduce using rule 5 (structure -> FOR expression { programme } .)
    }               reduce using rule 5 (structure -> FOR expression { programme } .)


state 40

    (6) structure -> WHILE expression { programme } .

    ;               reduce using rule 6 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 6 (structure -> WHILE expression { programme } .)
    }               reduce using rule 6 (structure -> WHILE expression { programme } .)


state 41

    (8) params -> IDPARAMS : paramvalue . ; params
    (9) params -> IDPARAMS : paramvalue .

    ;               shift and go to state 43
    )               reduce using rule 9 (params -> IDPARAMS : paramvalue .)


state 42

    (10) paramvalue -> expression . , paramvalue
    (11) paramvalue -> expression .
    (17) expression -> expression . ADD_OP expression
    (18) expression -> expression . MUL_OP expression

    ,               shift and go to state 44
    ;               reduce using rule 11 (paramvalue -> expression .)
    )               reduce using rule 11 (paramvalue -> expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23


state 43

    (8) params -> IDPARAMS : paramvalue ; . params
    (8) params -> . IDPARAMS : paramvalue ; params
    (9) params -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 29

    params                         shift and go to state 45

state 44

    (10) paramvalue -> expression , . paramvalue
    (10) paramvalue -> . expression , paramvalue
    (11) paramvalue -> . expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . COLORPARAMS
    (15) expression -> . " STRING "
    (16) expression -> . ( expression )
    (17) expression -> . expression ADD_OP expression
    (18) expression -> . expression MUL_OP expression
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 12
    COLORPARAMS     shift and go to state 13
    "               shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 16

    expression                     shift and go to state 42
    paramvalue                     shift and go to state 46

state 45

    (8) params -> IDPARAMS : paramvalue ; params .

    )               reduce using rule 8 (params -> IDPARAMS : paramvalue ; params .)


state 46

    (10) paramvalue -> expression , paramvalue .

    ;               reduce using rule 10 (paramvalue -> expression , paramvalue .)
    )               reduce using rule 10 (paramvalue -> expression , paramvalue .)

