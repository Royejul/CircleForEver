Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    NOTEQUAL
    POS
    WIDTH
    COLOR
    FONTSIZE
    WORD
    RADIUS
    WHITE
    BLACK
    RED
    BLUE
    YELLOW
    GREEN
    PINK
    PURPLE
    MAROON
    ORANGE
    LIME

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement ;
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> PRINT expression ;
Rule 6     compare -> expression < expression
Rule 7     compare -> expression > expression
Rule 8     compare -> expression EQUALS expression
Rule 9     compare -> expression LESSTHAN expression
Rule 10    compare -> expression GREATTHAN expression
Rule 11    structure -> FOR ( assignation ; compare ; assignation ) { programme }
Rule 12    structure -> WHILE ( compare ) { programme }
Rule 13    structure -> FORMS ( params )
Rule 14    params -> IDPARAMS : paramvalue ; params
Rule 15    params -> IDPARAMS : paramvalue
Rule 16    paramvalue -> expression , paramvalue
Rule 17    paramvalue -> expression
Rule 18    expression -> NUMBER
Rule 19    expression -> IDENTIFIER
Rule 20    expression -> COLORPARAMS
Rule 21    expression -> STRING
Rule 22    expression -> ( expression )
Rule 23    expression -> expression ADD_OP expression
Rule 24    expression -> expression MUL_OP expression
Rule 25    expression -> ADD_OP expression
Rule 26    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 11 12 13 22
)                    : 11 12 13 22
,                    : 16
:                    : 14 15
;                    : 1 2 5 11 11 14
<                    : 6
=                    : 26
>                    : 7
ADD_OP               : 23 25
BLACK                : 
BLUE                 : 
COLOR                : 
COLORPARAMS          : 20
EQUALS               : 8
FONTSIZE             : 
FOR                  : 11
FORMS                : 13
GREATTHAN            : 10
GREEN                : 
IDENTIFIER           : 19 26
IDPARAMS             : 14 15
LESSTHAN             : 9
LIME                 : 
MAROON               : 
MUL_OP               : 24
NOTEQUAL             : 
NUMBER               : 18
ORANGE               : 
PINK                 : 
POS                  : 
PRINT                : 5
PURPLE               : 
RADIUS               : 
RED                  : 
STRING               : 21
WHILE                : 12
WHITE                : 
WIDTH                : 
WORD                 : 
YELLOW               : 
error                : 
{                    : 11 12
}                    : 11 12

Nonterminals, with rules where they appear

assignation          : 3 11 11
compare              : 11 12
expression           : 5 6 6 7 7 8 8 9 9 10 10 16 17 22 23 23 24 24 25 26
params               : 13 14
paramvalue           : 14 15 16
programme            : 2 11 12 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement ;
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression ;
    (26) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 8
    FORMS           shift and go to state 9

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement . ;
    (2) programme -> statement . ; programme

    ;               shift and go to state 10


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> PRINT . expression ;
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 11

state 6

    (26) assignation -> IDENTIFIER . = expression

    =               shift and go to state 18


state 7

    (11) structure -> FOR . ( assignation ; compare ; assignation ) { programme }

    (               shift and go to state 19


state 8

    (12) structure -> WHILE . ( compare ) { programme }

    (               shift and go to state 20


state 9

    (13) structure -> FORMS . ( params )

    (               shift and go to state 21


state 10

    (1) programme -> statement ; .
    (2) programme -> statement ; . programme
    (1) programme -> . statement ;
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression ;
    (26) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    $end            reduce using rule 1 (programme -> statement ; .)
    }               reduce using rule 1 (programme -> statement ; .)
    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 8
    FORMS           shift and go to state 9

    statement                      shift and go to state 2
    programme                      shift and go to state 22
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 11

    (5) statement -> PRINT expression . ;
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ;               shift and go to state 23
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 12

    (18) expression -> NUMBER .

    ;               reduce using rule 18 (expression -> NUMBER .)
    ADD_OP          reduce using rule 18 (expression -> NUMBER .)
    MUL_OP          reduce using rule 18 (expression -> NUMBER .)
    )               reduce using rule 18 (expression -> NUMBER .)
    <               reduce using rule 18 (expression -> NUMBER .)
    >               reduce using rule 18 (expression -> NUMBER .)
    EQUALS          reduce using rule 18 (expression -> NUMBER .)
    LESSTHAN        reduce using rule 18 (expression -> NUMBER .)
    GREATTHAN       reduce using rule 18 (expression -> NUMBER .)
    ,               reduce using rule 18 (expression -> NUMBER .)


state 13

    (19) expression -> IDENTIFIER .

    ;               reduce using rule 19 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 19 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 19 (expression -> IDENTIFIER .)
    )               reduce using rule 19 (expression -> IDENTIFIER .)
    <               reduce using rule 19 (expression -> IDENTIFIER .)
    >               reduce using rule 19 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 19 (expression -> IDENTIFIER .)
    GREATTHAN       reduce using rule 19 (expression -> IDENTIFIER .)
    ,               reduce using rule 19 (expression -> IDENTIFIER .)


state 14

    (20) expression -> COLORPARAMS .

    ;               reduce using rule 20 (expression -> COLORPARAMS .)
    ADD_OP          reduce using rule 20 (expression -> COLORPARAMS .)
    MUL_OP          reduce using rule 20 (expression -> COLORPARAMS .)
    )               reduce using rule 20 (expression -> COLORPARAMS .)
    <               reduce using rule 20 (expression -> COLORPARAMS .)
    >               reduce using rule 20 (expression -> COLORPARAMS .)
    EQUALS          reduce using rule 20 (expression -> COLORPARAMS .)
    LESSTHAN        reduce using rule 20 (expression -> COLORPARAMS .)
    GREATTHAN       reduce using rule 20 (expression -> COLORPARAMS .)
    ,               reduce using rule 20 (expression -> COLORPARAMS .)


state 15

    (21) expression -> STRING .

    ;               reduce using rule 21 (expression -> STRING .)
    ADD_OP          reduce using rule 21 (expression -> STRING .)
    MUL_OP          reduce using rule 21 (expression -> STRING .)
    )               reduce using rule 21 (expression -> STRING .)
    <               reduce using rule 21 (expression -> STRING .)
    >               reduce using rule 21 (expression -> STRING .)
    EQUALS          reduce using rule 21 (expression -> STRING .)
    LESSTHAN        reduce using rule 21 (expression -> STRING .)
    GREATTHAN       reduce using rule 21 (expression -> STRING .)
    ,               reduce using rule 21 (expression -> STRING .)


state 16

    (22) expression -> ( . expression )
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 26

state 17

    (25) expression -> ADD_OP . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 27

state 18

    (26) assignation -> IDENTIFIER = . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 28

state 19

    (11) structure -> FOR ( . assignation ; compare ; assignation ) { programme }
    (26) assignation -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 6

    assignation                    shift and go to state 29

state 20

    (12) structure -> WHILE ( . compare ) { programme }
    (6) compare -> . expression < expression
    (7) compare -> . expression > expression
    (8) compare -> . expression EQUALS expression
    (9) compare -> . expression LESSTHAN expression
    (10) compare -> . expression GREATTHAN expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    compare                        shift and go to state 30
    expression                     shift and go to state 31

state 21

    (13) structure -> FORMS ( . params )
    (14) params -> . IDPARAMS : paramvalue ; params
    (15) params -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 33

    params                         shift and go to state 32

state 22

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 23

    (5) statement -> PRINT expression ; .

    ;               reduce using rule 5 (statement -> PRINT expression ; .)


state 24

    (23) expression -> expression ADD_OP . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 34

state 25

    (24) expression -> expression MUL_OP . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 35

state 26

    (22) expression -> ( expression . )
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               shift and go to state 36
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 27

    (25) expression -> ADD_OP expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ;               reduce using rule 25 (expression -> ADD_OP expression .)
    ADD_OP          reduce using rule 25 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 25 (expression -> ADD_OP expression .)
    )               reduce using rule 25 (expression -> ADD_OP expression .)
    <               reduce using rule 25 (expression -> ADD_OP expression .)
    >               reduce using rule 25 (expression -> ADD_OP expression .)
    EQUALS          reduce using rule 25 (expression -> ADD_OP expression .)
    LESSTHAN        reduce using rule 25 (expression -> ADD_OP expression .)
    GREATTHAN       reduce using rule 25 (expression -> ADD_OP expression .)
    ,               reduce using rule 25 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 24 ]
  ! MUL_OP          [ shift and go to state 25 ]


state 28

    (26) assignation -> IDENTIFIER = expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ;               reduce using rule 26 (assignation -> IDENTIFIER = expression .)
    )               reduce using rule 26 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 29

    (11) structure -> FOR ( assignation . ; compare ; assignation ) { programme }

    ;               shift and go to state 37


state 30

    (12) structure -> WHILE ( compare . ) { programme }

    )               shift and go to state 38


state 31

    (6) compare -> expression . < expression
    (7) compare -> expression . > expression
    (8) compare -> expression . EQUALS expression
    (9) compare -> expression . LESSTHAN expression
    (10) compare -> expression . GREATTHAN expression
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    <               shift and go to state 39
    >               shift and go to state 40
    EQUALS          shift and go to state 41
    LESSTHAN        shift and go to state 42
    GREATTHAN       shift and go to state 43
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 32

    (13) structure -> FORMS ( params . )

    )               shift and go to state 44


state 33

    (14) params -> IDPARAMS . : paramvalue ; params
    (15) params -> IDPARAMS . : paramvalue

    :               shift and go to state 45


state 34

    (23) expression -> expression ADD_OP expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ;               reduce using rule 23 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 23 (expression -> expression ADD_OP expression .)
    )               reduce using rule 23 (expression -> expression ADD_OP expression .)
    <               reduce using rule 23 (expression -> expression ADD_OP expression .)
    >               reduce using rule 23 (expression -> expression ADD_OP expression .)
    EQUALS          reduce using rule 23 (expression -> expression ADD_OP expression .)
    LESSTHAN        reduce using rule 23 (expression -> expression ADD_OP expression .)
    GREATTHAN       reduce using rule 23 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 23 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 25

  ! MUL_OP          [ reduce using rule 23 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 24 ]


state 35

    (24) expression -> expression MUL_OP expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ;               reduce using rule 24 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 24 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 24 (expression -> expression MUL_OP expression .)
    )               reduce using rule 24 (expression -> expression MUL_OP expression .)
    <               reduce using rule 24 (expression -> expression MUL_OP expression .)
    >               reduce using rule 24 (expression -> expression MUL_OP expression .)
    EQUALS          reduce using rule 24 (expression -> expression MUL_OP expression .)
    LESSTHAN        reduce using rule 24 (expression -> expression MUL_OP expression .)
    GREATTHAN       reduce using rule 24 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 24 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 24 ]
  ! MUL_OP          [ shift and go to state 25 ]


state 36

    (22) expression -> ( expression ) .

    ;               reduce using rule 22 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 22 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 22 (expression -> ( expression ) .)
    )               reduce using rule 22 (expression -> ( expression ) .)
    <               reduce using rule 22 (expression -> ( expression ) .)
    >               reduce using rule 22 (expression -> ( expression ) .)
    EQUALS          reduce using rule 22 (expression -> ( expression ) .)
    LESSTHAN        reduce using rule 22 (expression -> ( expression ) .)
    GREATTHAN       reduce using rule 22 (expression -> ( expression ) .)
    ,               reduce using rule 22 (expression -> ( expression ) .)


state 37

    (11) structure -> FOR ( assignation ; . compare ; assignation ) { programme }
    (6) compare -> . expression < expression
    (7) compare -> . expression > expression
    (8) compare -> . expression EQUALS expression
    (9) compare -> . expression LESSTHAN expression
    (10) compare -> . expression GREATTHAN expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    compare                        shift and go to state 46
    expression                     shift and go to state 31

state 38

    (12) structure -> WHILE ( compare ) . { programme }

    {               shift and go to state 47


state 39

    (6) compare -> expression < . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 48

state 40

    (7) compare -> expression > . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 49

state 41

    (8) compare -> expression EQUALS . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 50

state 42

    (9) compare -> expression LESSTHAN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 51

state 43

    (10) compare -> expression GREATTHAN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 52

state 44

    (13) structure -> FORMS ( params ) .

    ;               reduce using rule 13 (structure -> FORMS ( params ) .)


state 45

    (14) params -> IDPARAMS : . paramvalue ; params
    (15) params -> IDPARAMS : . paramvalue
    (16) paramvalue -> . expression , paramvalue
    (17) paramvalue -> . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    paramvalue                     shift and go to state 53
    expression                     shift and go to state 54

state 46

    (11) structure -> FOR ( assignation ; compare . ; assignation ) { programme }

    ;               shift and go to state 55


state 47

    (12) structure -> WHILE ( compare ) { . programme }
    (1) programme -> . statement ;
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression ;
    (26) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 8
    FORMS           shift and go to state 9

    programme                      shift and go to state 56
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 48

    (6) compare -> expression < expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 6 (compare -> expression < expression .)
    ;               reduce using rule 6 (compare -> expression < expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 49

    (7) compare -> expression > expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 7 (compare -> expression > expression .)
    ;               reduce using rule 7 (compare -> expression > expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 50

    (8) compare -> expression EQUALS expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 8 (compare -> expression EQUALS expression .)
    ;               reduce using rule 8 (compare -> expression EQUALS expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 51

    (9) compare -> expression LESSTHAN expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 9 (compare -> expression LESSTHAN expression .)
    ;               reduce using rule 9 (compare -> expression LESSTHAN expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 52

    (10) compare -> expression GREATTHAN expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    )               reduce using rule 10 (compare -> expression GREATTHAN expression .)
    ;               reduce using rule 10 (compare -> expression GREATTHAN expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 53

    (14) params -> IDPARAMS : paramvalue . ; params
    (15) params -> IDPARAMS : paramvalue .

    ;               shift and go to state 57
    )               reduce using rule 15 (params -> IDPARAMS : paramvalue .)


state 54

    (16) paramvalue -> expression . , paramvalue
    (17) paramvalue -> expression .
    (23) expression -> expression . ADD_OP expression
    (24) expression -> expression . MUL_OP expression

    ,               shift and go to state 58
    ;               reduce using rule 17 (paramvalue -> expression .)
    )               reduce using rule 17 (paramvalue -> expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 55

    (11) structure -> FOR ( assignation ; compare ; . assignation ) { programme }
    (26) assignation -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 6

    assignation                    shift and go to state 59

state 56

    (12) structure -> WHILE ( compare ) { programme . }

    }               shift and go to state 60


state 57

    (14) params -> IDPARAMS : paramvalue ; . params
    (14) params -> . IDPARAMS : paramvalue ; params
    (15) params -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 33

    params                         shift and go to state 61

state 58

    (16) paramvalue -> expression , . paramvalue
    (16) paramvalue -> . expression , paramvalue
    (17) paramvalue -> . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . COLORPARAMS
    (21) expression -> . STRING
    (22) expression -> . ( expression )
    (23) expression -> . expression ADD_OP expression
    (24) expression -> . expression MUL_OP expression
    (25) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    COLORPARAMS     shift and go to state 14
    STRING          shift and go to state 15
    (               shift and go to state 16
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 54
    paramvalue                     shift and go to state 62

state 59

    (11) structure -> FOR ( assignation ; compare ; assignation . ) { programme }

    )               shift and go to state 63


state 60

    (12) structure -> WHILE ( compare ) { programme } .

    ;               reduce using rule 12 (structure -> WHILE ( compare ) { programme } .)


state 61

    (14) params -> IDPARAMS : paramvalue ; params .

    )               reduce using rule 14 (params -> IDPARAMS : paramvalue ; params .)


state 62

    (16) paramvalue -> expression , paramvalue .

    ;               reduce using rule 16 (paramvalue -> expression , paramvalue .)
    )               reduce using rule 16 (paramvalue -> expression , paramvalue .)


state 63

    (11) structure -> FOR ( assignation ; compare ; assignation ) . { programme }

    {               shift and go to state 64


state 64

    (11) structure -> FOR ( assignation ; compare ; assignation ) { . programme }
    (1) programme -> . statement ;
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression ;
    (26) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 8
    FORMS           shift and go to state 9

    assignation                    shift and go to state 3
    programme                      shift and go to state 65
    statement                      shift and go to state 2
    structure                      shift and go to state 4

state 65

    (11) structure -> FOR ( assignation ; compare ; assignation ) { programme . }

    }               shift and go to state 66


state 66

    (11) structure -> FOR ( assignation ; compare ; assignation ) { programme } .

    ;               reduce using rule 11 (structure -> FOR ( assignation ; compare ; assignation ) { programme } .)

