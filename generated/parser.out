Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    NOTEQUAL
    POS
    WIDTH
    COLOR
    LINECOLOR
    FONTSIZE
    WORD
    WHITE
    BLACK
    RED
    BLUE
    YELLOW
    GREEN
    PINK
    PURPLE
    MAROON
    ORANGE
    LIME

Grammar

Rule 0     S' -> init
Rule 1     init -> programme
Rule 2     programme -> statement
Rule 3     programme -> statement ; programme
Rule 4     statement -> assignation
Rule 5     statement -> structure
Rule 6     statement -> PRINT expression
Rule 7     compare -> expression COMP expression
Rule 8     compare -> expression EQUALS expression
Rule 9     compare -> expression LESSTHAN expression
Rule 10    compare -> expression GREATTHAN expression
Rule 11    structure -> FOR ( assignation ; compare ; assignation ) { programme }
Rule 12    structure -> WHILE ( compare ) { programme }
Rule 13    structure -> FORMS ( params )
Rule 14    params -> param
Rule 15    params -> param ; params
Rule 16    param -> IDPARAMS : paramvalue
Rule 17    paramvalue -> expression , paramvalue
Rule 18    paramvalue -> expression
Rule 19    expression -> NUMBER
Rule 20    expression -> IDENTIFIER
Rule 21    expression -> COLORPARAMS
Rule 22    expression -> STRING
Rule 23    expression -> ( expression )
Rule 24    expression -> expression ADD_OP expression
Rule 25    expression -> expression MUL_OP expression
Rule 26    expression -> ADD_OP expression
Rule 27    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 11 12 13 23
)                    : 11 12 13 23
,                    : 17
:                    : 16
;                    : 3 11 11 15
=                    : 27
ADD_OP               : 24 26
BLACK                : 
BLUE                 : 
COLOR                : 
COLORPARAMS          : 21
COMP                 : 7
EQUALS               : 8
FONTSIZE             : 
FOR                  : 11
FORMS                : 13
GREATTHAN            : 10
GREEN                : 
IDENTIFIER           : 20 27
IDPARAMS             : 16
LESSTHAN             : 9
LIME                 : 
LINECOLOR            : 
MAROON               : 
MUL_OP               : 25
NOTEQUAL             : 
NUMBER               : 19
ORANGE               : 
PINK                 : 
POS                  : 
PRINT                : 6
PURPLE               : 
RED                  : 
STRING               : 22
WHILE                : 12
WHITE                : 
WIDTH                : 
WORD                 : 
YELLOW               : 
error                : 
{                    : 11 12
}                    : 11 12

Nonterminals, with rules where they appear

assignation          : 4 11 11
compare              : 11 12
expression           : 6 7 7 8 8 9 9 10 10 17 18 23 24 24 25 25 26 27
init                 : 0
param                : 14 15
params               : 13 15
paramvalue           : 16 17
programme            : 1 3 11 12
statement            : 2 3
structure            : 5

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . programme
    (2) programme -> . statement
    (3) programme -> . statement ; programme
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (27) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 9
    FORMS           shift and go to state 10

    init                           shift and go to state 1
    programme                      shift and go to state 2
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    structure                      shift and go to state 5

state 1

    (0) S' -> init .



state 2

    (1) init -> programme .

    $end            reduce using rule 1 (init -> programme .)


state 3

    (2) programme -> statement .
    (3) programme -> statement . ; programme

    $end            reduce using rule 2 (programme -> statement .)
    }               reduce using rule 2 (programme -> statement .)
    ;               shift and go to state 11


state 4

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)
    $end            reduce using rule 4 (statement -> assignation .)
    }               reduce using rule 4 (statement -> assignation .)


state 5

    (5) statement -> structure .

    ;               reduce using rule 5 (statement -> structure .)
    $end            reduce using rule 5 (statement -> structure .)
    }               reduce using rule 5 (statement -> structure .)


state 6

    (6) statement -> PRINT . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 12

state 7

    (27) assignation -> IDENTIFIER . = expression

    =               shift and go to state 19


state 8

    (11) structure -> FOR . ( assignation ; compare ; assignation ) { programme }

    (               shift and go to state 20


state 9

    (12) structure -> WHILE . ( compare ) { programme }

    (               shift and go to state 21


state 10

    (13) structure -> FORMS . ( params )

    (               shift and go to state 22


state 11

    (3) programme -> statement ; . programme
    (2) programme -> . statement
    (3) programme -> . statement ; programme
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (27) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 9
    FORMS           shift and go to state 10

    statement                      shift and go to state 3
    programme                      shift and go to state 23
    assignation                    shift and go to state 4
    structure                      shift and go to state 5

state 12

    (6) statement -> PRINT expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    ;               reduce using rule 6 (statement -> PRINT expression .)
    $end            reduce using rule 6 (statement -> PRINT expression .)
    }               reduce using rule 6 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 13

    (19) expression -> NUMBER .

    ADD_OP          reduce using rule 19 (expression -> NUMBER .)
    MUL_OP          reduce using rule 19 (expression -> NUMBER .)
    ;               reduce using rule 19 (expression -> NUMBER .)
    $end            reduce using rule 19 (expression -> NUMBER .)
    }               reduce using rule 19 (expression -> NUMBER .)
    )               reduce using rule 19 (expression -> NUMBER .)
    COMP            reduce using rule 19 (expression -> NUMBER .)
    EQUALS          reduce using rule 19 (expression -> NUMBER .)
    LESSTHAN        reduce using rule 19 (expression -> NUMBER .)
    GREATTHAN       reduce using rule 19 (expression -> NUMBER .)
    ,               reduce using rule 19 (expression -> NUMBER .)


state 14

    (20) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 20 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 20 (expression -> IDENTIFIER .)
    ;               reduce using rule 20 (expression -> IDENTIFIER .)
    $end            reduce using rule 20 (expression -> IDENTIFIER .)
    }               reduce using rule 20 (expression -> IDENTIFIER .)
    )               reduce using rule 20 (expression -> IDENTIFIER .)
    COMP            reduce using rule 20 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 20 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 20 (expression -> IDENTIFIER .)
    GREATTHAN       reduce using rule 20 (expression -> IDENTIFIER .)
    ,               reduce using rule 20 (expression -> IDENTIFIER .)


state 15

    (21) expression -> COLORPARAMS .

    ADD_OP          reduce using rule 21 (expression -> COLORPARAMS .)
    MUL_OP          reduce using rule 21 (expression -> COLORPARAMS .)
    ;               reduce using rule 21 (expression -> COLORPARAMS .)
    $end            reduce using rule 21 (expression -> COLORPARAMS .)
    }               reduce using rule 21 (expression -> COLORPARAMS .)
    )               reduce using rule 21 (expression -> COLORPARAMS .)
    COMP            reduce using rule 21 (expression -> COLORPARAMS .)
    EQUALS          reduce using rule 21 (expression -> COLORPARAMS .)
    LESSTHAN        reduce using rule 21 (expression -> COLORPARAMS .)
    GREATTHAN       reduce using rule 21 (expression -> COLORPARAMS .)
    ,               reduce using rule 21 (expression -> COLORPARAMS .)


state 16

    (22) expression -> STRING .

    ADD_OP          reduce using rule 22 (expression -> STRING .)
    MUL_OP          reduce using rule 22 (expression -> STRING .)
    ;               reduce using rule 22 (expression -> STRING .)
    $end            reduce using rule 22 (expression -> STRING .)
    }               reduce using rule 22 (expression -> STRING .)
    )               reduce using rule 22 (expression -> STRING .)
    COMP            reduce using rule 22 (expression -> STRING .)
    EQUALS          reduce using rule 22 (expression -> STRING .)
    LESSTHAN        reduce using rule 22 (expression -> STRING .)
    GREATTHAN       reduce using rule 22 (expression -> STRING .)
    ,               reduce using rule 22 (expression -> STRING .)


state 17

    (23) expression -> ( . expression )
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 26

state 18

    (26) expression -> ADD_OP . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 27

state 19

    (27) assignation -> IDENTIFIER = . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 28

state 20

    (11) structure -> FOR ( . assignation ; compare ; assignation ) { programme }
    (27) assignation -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 7

    assignation                    shift and go to state 29

state 21

    (12) structure -> WHILE ( . compare ) { programme }
    (7) compare -> . expression COMP expression
    (8) compare -> . expression EQUALS expression
    (9) compare -> . expression LESSTHAN expression
    (10) compare -> . expression GREATTHAN expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    compare                        shift and go to state 30
    expression                     shift and go to state 31

state 22

    (13) structure -> FORMS ( . params )
    (14) params -> . param
    (15) params -> . param ; params
    (16) param -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 34

    params                         shift and go to state 32
    param                          shift and go to state 33

state 23

    (3) programme -> statement ; programme .

    $end            reduce using rule 3 (programme -> statement ; programme .)
    }               reduce using rule 3 (programme -> statement ; programme .)


state 24

    (24) expression -> expression ADD_OP . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 35

state 25

    (25) expression -> expression MUL_OP . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 36

state 26

    (23) expression -> ( expression . )
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    )               shift and go to state 37
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 27

    (26) expression -> ADD_OP expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 26 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 26 (expression -> ADD_OP expression .)
    ;               reduce using rule 26 (expression -> ADD_OP expression .)
    $end            reduce using rule 26 (expression -> ADD_OP expression .)
    }               reduce using rule 26 (expression -> ADD_OP expression .)
    )               reduce using rule 26 (expression -> ADD_OP expression .)
    COMP            reduce using rule 26 (expression -> ADD_OP expression .)
    EQUALS          reduce using rule 26 (expression -> ADD_OP expression .)
    LESSTHAN        reduce using rule 26 (expression -> ADD_OP expression .)
    GREATTHAN       reduce using rule 26 (expression -> ADD_OP expression .)
    ,               reduce using rule 26 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 24 ]
  ! MUL_OP          [ shift and go to state 25 ]


state 28

    (27) assignation -> IDENTIFIER = expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    ;               reduce using rule 27 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 27 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 27 (assignation -> IDENTIFIER = expression .)
    )               reduce using rule 27 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 29

    (11) structure -> FOR ( assignation . ; compare ; assignation ) { programme }

    ;               shift and go to state 38


state 30

    (12) structure -> WHILE ( compare . ) { programme }

    )               shift and go to state 39


state 31

    (7) compare -> expression . COMP expression
    (8) compare -> expression . EQUALS expression
    (9) compare -> expression . LESSTHAN expression
    (10) compare -> expression . GREATTHAN expression
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    COMP            shift and go to state 40
    EQUALS          shift and go to state 41
    LESSTHAN        shift and go to state 42
    GREATTHAN       shift and go to state 43
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 32

    (13) structure -> FORMS ( params . )

    )               shift and go to state 44


state 33

    (14) params -> param .
    (15) params -> param . ; params

    )               reduce using rule 14 (params -> param .)
    ;               shift and go to state 45


state 34

    (16) param -> IDPARAMS . : paramvalue

    :               shift and go to state 46


state 35

    (24) expression -> expression ADD_OP expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 24 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 24 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 24 (expression -> expression ADD_OP expression .)
    }               reduce using rule 24 (expression -> expression ADD_OP expression .)
    )               reduce using rule 24 (expression -> expression ADD_OP expression .)
    COMP            reduce using rule 24 (expression -> expression ADD_OP expression .)
    EQUALS          reduce using rule 24 (expression -> expression ADD_OP expression .)
    LESSTHAN        reduce using rule 24 (expression -> expression ADD_OP expression .)
    GREATTHAN       reduce using rule 24 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 24 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 25

  ! MUL_OP          [ reduce using rule 24 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 24 ]


state 36

    (25) expression -> expression MUL_OP expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 25 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 25 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 25 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 25 (expression -> expression MUL_OP expression .)
    }               reduce using rule 25 (expression -> expression MUL_OP expression .)
    )               reduce using rule 25 (expression -> expression MUL_OP expression .)
    COMP            reduce using rule 25 (expression -> expression MUL_OP expression .)
    EQUALS          reduce using rule 25 (expression -> expression MUL_OP expression .)
    LESSTHAN        reduce using rule 25 (expression -> expression MUL_OP expression .)
    GREATTHAN       reduce using rule 25 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 25 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 24 ]
  ! MUL_OP          [ shift and go to state 25 ]


state 37

    (23) expression -> ( expression ) .

    ADD_OP          reduce using rule 23 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 23 (expression -> ( expression ) .)
    ;               reduce using rule 23 (expression -> ( expression ) .)
    $end            reduce using rule 23 (expression -> ( expression ) .)
    }               reduce using rule 23 (expression -> ( expression ) .)
    )               reduce using rule 23 (expression -> ( expression ) .)
    COMP            reduce using rule 23 (expression -> ( expression ) .)
    EQUALS          reduce using rule 23 (expression -> ( expression ) .)
    LESSTHAN        reduce using rule 23 (expression -> ( expression ) .)
    GREATTHAN       reduce using rule 23 (expression -> ( expression ) .)
    ,               reduce using rule 23 (expression -> ( expression ) .)


state 38

    (11) structure -> FOR ( assignation ; . compare ; assignation ) { programme }
    (7) compare -> . expression COMP expression
    (8) compare -> . expression EQUALS expression
    (9) compare -> . expression LESSTHAN expression
    (10) compare -> . expression GREATTHAN expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    compare                        shift and go to state 47
    expression                     shift and go to state 31

state 39

    (12) structure -> WHILE ( compare ) . { programme }

    {               shift and go to state 48


state 40

    (7) compare -> expression COMP . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 49

state 41

    (8) compare -> expression EQUALS . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 50

state 42

    (9) compare -> expression LESSTHAN . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 51

state 43

    (10) compare -> expression GREATTHAN . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 52

state 44

    (13) structure -> FORMS ( params ) .

    ;               reduce using rule 13 (structure -> FORMS ( params ) .)
    $end            reduce using rule 13 (structure -> FORMS ( params ) .)
    }               reduce using rule 13 (structure -> FORMS ( params ) .)


state 45

    (15) params -> param ; . params
    (14) params -> . param
    (15) params -> . param ; params
    (16) param -> . IDPARAMS : paramvalue

    IDPARAMS        shift and go to state 34

    param                          shift and go to state 33
    params                         shift and go to state 53

state 46

    (16) param -> IDPARAMS : . paramvalue
    (17) paramvalue -> . expression , paramvalue
    (18) paramvalue -> . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    paramvalue                     shift and go to state 54
    expression                     shift and go to state 55

state 47

    (11) structure -> FOR ( assignation ; compare . ; assignation ) { programme }

    ;               shift and go to state 56


state 48

    (12) structure -> WHILE ( compare ) { . programme }
    (2) programme -> . statement
    (3) programme -> . statement ; programme
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (27) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 9
    FORMS           shift and go to state 10

    programme                      shift and go to state 57
    statement                      shift and go to state 3
    assignation                    shift and go to state 4
    structure                      shift and go to state 5

state 49

    (7) compare -> expression COMP expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    )               reduce using rule 7 (compare -> expression COMP expression .)
    ;               reduce using rule 7 (compare -> expression COMP expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 50

    (8) compare -> expression EQUALS expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    )               reduce using rule 8 (compare -> expression EQUALS expression .)
    ;               reduce using rule 8 (compare -> expression EQUALS expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 51

    (9) compare -> expression LESSTHAN expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    )               reduce using rule 9 (compare -> expression LESSTHAN expression .)
    ;               reduce using rule 9 (compare -> expression LESSTHAN expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 52

    (10) compare -> expression GREATTHAN expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    )               reduce using rule 10 (compare -> expression GREATTHAN expression .)
    ;               reduce using rule 10 (compare -> expression GREATTHAN expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 53

    (15) params -> param ; params .

    )               reduce using rule 15 (params -> param ; params .)


state 54

    (16) param -> IDPARAMS : paramvalue .

    ;               reduce using rule 16 (param -> IDPARAMS : paramvalue .)
    )               reduce using rule 16 (param -> IDPARAMS : paramvalue .)


state 55

    (17) paramvalue -> expression . , paramvalue
    (18) paramvalue -> expression .
    (24) expression -> expression . ADD_OP expression
    (25) expression -> expression . MUL_OP expression

    ,               shift and go to state 58
    ;               reduce using rule 18 (paramvalue -> expression .)
    )               reduce using rule 18 (paramvalue -> expression .)
    ADD_OP          shift and go to state 24
    MUL_OP          shift and go to state 25


state 56

    (11) structure -> FOR ( assignation ; compare ; . assignation ) { programme }
    (27) assignation -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 7

    assignation                    shift and go to state 59

state 57

    (12) structure -> WHILE ( compare ) { programme . }

    }               shift and go to state 60


state 58

    (17) paramvalue -> expression , . paramvalue
    (17) paramvalue -> . expression , paramvalue
    (18) paramvalue -> . expression
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER
    (21) expression -> . COLORPARAMS
    (22) expression -> . STRING
    (23) expression -> . ( expression )
    (24) expression -> . expression ADD_OP expression
    (25) expression -> . expression MUL_OP expression
    (26) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    COLORPARAMS     shift and go to state 15
    STRING          shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 18

    expression                     shift and go to state 55
    paramvalue                     shift and go to state 61

state 59

    (11) structure -> FOR ( assignation ; compare ; assignation . ) { programme }

    )               shift and go to state 62


state 60

    (12) structure -> WHILE ( compare ) { programme } .

    ;               reduce using rule 12 (structure -> WHILE ( compare ) { programme } .)
    $end            reduce using rule 12 (structure -> WHILE ( compare ) { programme } .)
    }               reduce using rule 12 (structure -> WHILE ( compare ) { programme } .)


state 61

    (17) paramvalue -> expression , paramvalue .

    ;               reduce using rule 17 (paramvalue -> expression , paramvalue .)
    )               reduce using rule 17 (paramvalue -> expression , paramvalue .)


state 62

    (11) structure -> FOR ( assignation ; compare ; assignation ) . { programme }

    {               shift and go to state 63


state 63

    (11) structure -> FOR ( assignation ; compare ; assignation ) { . programme }
    (2) programme -> . statement
    (3) programme -> . statement ; programme
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (27) assignation -> . IDENTIFIER = expression
    (11) structure -> . FOR ( assignation ; compare ; assignation ) { programme }
    (12) structure -> . WHILE ( compare ) { programme }
    (13) structure -> . FORMS ( params )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 9
    FORMS           shift and go to state 10

    assignation                    shift and go to state 4
    programme                      shift and go to state 64
    statement                      shift and go to state 3
    structure                      shift and go to state 5

state 64

    (11) structure -> FOR ( assignation ; compare ; assignation ) { programme . }

    }               shift and go to state 65


state 65

    (11) structure -> FOR ( assignation ; compare ; assignation ) { programme } .

    ;               reduce using rule 11 (structure -> FOR ( assignation ; compare ; assignation ) { programme } .)
    $end            reduce using rule 11 (structure -> FOR ( assignation ; compare ; assignation ) { programme } .)
    }               reduce using rule 11 (structure -> FOR ( assignation ; compare ; assignation ) { programme } .)

